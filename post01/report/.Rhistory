closest <-  which.min(abs(data[i, x] - test[ , x]))
teams[i, 2] <- test[closest, 1]
}
value <- numeric(length = 30)
for (i in 1:30) {
value[i] <- data[i, x]
}
net <- network(teams, directed = FALSE, matrix.type="edgelist")
set.vertex.attribute(net, "division", division)
set.vertex.attribute(net, x, value)
ggnet2(net, label = TRUE, color = "division", palette = sample(colors, 1), size = x, size.cut = TRUE) + theme(panel.background = element_rect(fill = "grey15"))
}
group_teams_by("efficiency")
group_teams_by <- function(x) {
teams <- matrix(NA, nrow = 30, ncol = 2)
teams[ , 1] <- data[ , 1]
for (i in 1:30) {
test <- data[-i, ]
closest <-  which.min(abs(data[i, x] - test[ , x]))
teams[i, 2] <- test[closest, 1]
}
value <- numeric(length = 30)
for (i in 1:30) {
value[i] <- data[i, x]
}
net <- network(teams, directed = FALSE, matrix.type="edgelist")
set.vertex.attribute(net, "division", division)
set.vertex.attribute(net, x, value)
ggnet2(net, label = TRUE, color = "division", palette = sample(colors, 1), size = x, size.cut = TRUE, label.color = "white") + theme(panel.background = element_rect(fill = "grey15"))
}
group_teams_by("efficiency")
group_teams_by("efficiency")
group_teams_by("efficiency")
group_teams_by("efficiency")
group_teams_by <- function(x) {
teams <- matrix(NA, nrow = 30, ncol = 2)
teams[ , 1] <- data[ , 1]
for (i in 1:30) {
test <- data[-i, ]
closest <-  which.min(abs(data[i, x] - test[ , x]))
teams[i, 2] <- test[closest, 1]
}
value <- numeric(length = 30)
for (i in 1:30) {
value[i] <- data[i, x]
}
net <- network(teams, directed = FALSE, matrix.type="edgelist")
set.vertex.attribute(net, "division", division)
set.vertex.attribute(net, x, value)
ggnet2(net, label = TRUE, color = "division", palette = sample(colors, 1), size = x, size.cut = TRUE)
}
group_teams_by("efficiency")
east_conference <- c(atlantic, central, southeast)
west_conference <- c(northwest, pacific, southwest)
conference <- character(length = 30)
for (i in 1:30) {
if (network.vertex.names(net)[i] %in% east_conference) {
conference[i] <- "eastern conference"
} else {
conference[i] <- "western conference"
}
}
set.vertex.attribute(net, "conference", conference)
ggnet2(net, label = TRUE, color = "division", shape = "conference", palette = sample(colors, 1), size = "value", size.cut = TRUE, size.legend = "number of 3-pointers")
group_teams_by <- function(x) {
teams <- matrix(NA, nrow = 30, ncol = 2)
teams[ , 1] <- data[ , 1]
for (i in 1:30) {
test <- data[-i, ]
closest <-  which.min(abs(data[i, x] - test[ , x]))
teams[i, 2] <- test[closest, 1]
}
value <- numeric(length = 30)
for (i in 1:30) {
value[i] <- data[i, x]
}
net <- network(teams, directed = FALSE, matrix.type="edgelist")
set.vertex.attribute(net, "division", division)
set.vertex.attribute(net, "conference", conference)
set.vertex.attribute(net, x, value)
ggnet2(net, label = TRUE, color = "division", shape = "conference", palette = sample(colors, 1), size = x, size.cut = TRUE)
}
group_teams_by("efficiency")
group_teams_by("efficiency")
group_teams_by("efficiency")
colors <- c("Set1", "Set2", "Set3", "Pastel1", "Pastel2")
group_teams_by <- function(x) {
teams <- matrix(NA, nrow = 30, ncol = 2)
teams[ , 1] <- data[ , 1]
for (i in 1:30) {
test <- data[-i, ]
closest <-  which.min(abs(data[i, x] - test[ , x]))
teams[i, 2] <- test[closest, 1]
}
value <- numeric(length = 30)
for (i in 1:30) {
value[i] <- data[i, x]
}
net <- network(teams, directed = FALSE, matrix.type="edgelist")
set.vertex.attribute(net, "division", division)
set.vertex.attribute(net, "conference", conference)
set.vertex.attribute(net, x, value)
ggnet2(net, label = TRUE, color = "division", shape = "conference", palette = sample(colors, 1), size = x, size.cut = TRUE)
}
group_teams_by("efficiency")
group_teams_by("efficiency")
group_teams_by("efficiency")
group_teams_by("efficiency")
group_teams_by("points3")
group_teams_by("salary")
View(data)
group_teams_by("experience")
group_teams_by("assists")
group_teams_by("assists")
group_teams_by("assists")
division <- character(length = 30)
for (i in 1:30) {
if (network.vertex.names(net)[i] %in% atlantic) {
# network.vertex.names(net) gives you a vector of the teams in net
# use %in% to see if the team is an element in atlantic
division[i] <- "atlantic"
# assign the ith element in division to atlantic
} else if (network.vertex.names(net)[i] %in% central) {
division[i] <- "central"
} else if (network.vertex.names(net)[i] %in% southeast) {
division[i] <- "southeast"
} else if (network.vertex.names(net)[i] %in% northwest) {
division[i] <- "northwest"
} else if (network.vertex.names(net)[i] %in% pacific) {
division[i] <- "pacific"
} else {
division[i] <- "southwest"
}
}
division
set.vertex.attribute(net, "division", division)
colors <- c("Set1", "Set2", "Set3", "Pastel1", "Pastel2")
# to choose a random color scheme
ggnet2(net, label = TRUE, color = "division", palette = sample(colors, 1))
# palette chooses the color scheme
# use sample(colors, 1) to randomly pick a color scheme
value <- numeric(length = 30)
for (i in 1:30) {
value[i] <- data[i, "points3"]
}
set.vertex.attribute(net, "value", value)
ggnet2(net, label = TRUE, color = "division", palette = sample(colors, 1), size = "value", size.cut = TRUE, size.legend = "number of 3-pointers")
# set the size argument to the "value" attribute
# set size.cut = TRUE to separate node sizes by quartile
# set size.legend = "number of 3-pointers" to relabel the legend name
group_teams_by("assists")
View(data)
group_teams_by("steals")
conference <- character(length = 30)
for (i in 1:30) {
if (network.vertex.names(net)[i] %in% east_conference) {
conference[i] <- "eastern conference"
} else {
conference[i] <- "western conference"
}
}
conference
set.vertex.attribute(net, "conference", conference)
ggnet2(net, label = TRUE, color = "division", palette = sample(colors, 1), size = "value", size.cut = TRUE, size.legend = "number of 3-pointers", shape = "conference")
# set the shape argument to the "conference" attribute
group_teams_by <- function(x) {
# x is a statistic in the dataset inputted as a string
teams <- matrix(NA, nrow = 30, ncol = 2)
teams[ , 1] <- data[ , 1]
for (i in 1:30) {
test <- data[-i, ]
closest <-  which.min(abs(data[i, x] - test[ , x]))
teams[i, 2] <- test[closest, 1]
}
value <- numeric(length = 30)
for (i in 1:30) {
value[i] <- data[i, x]
}
net <- network(teams, directed = FALSE, matrix.type="edgelist")
set.vertex.attribute(net, "division", division)
set.vertex.attribute(net, "conference", conference)
set.vertex.attribute(net, x, value)
ggnet2(net, label = TRUE, color = "division", palette = sample(colors, 1), size = x, size.cut = TRUE, shape = "conference")
}
colnames(data)
colnames(data)
# show the available statistics
group_teams_by("experience")
group_teams_by("salary")
group_teams_by("points")
group_teams_by("assists")
group_teams_by("efficiency")
division <- character(length = 30)
for (i in 1:30) {
if (network.vertex.names(net)[i] %in% atlantic) {
# network.vertex.names(net) gives you a vector of the teams in net
# use %in% to see if the team is an element in atlantic
division[i] <- "atlantic"
# assign the ith element in division to atlantic
} else if (network.vertex.names(net)[i] %in% central) {
division[i] <- "central"
} else if (network.vertex.names(net)[i] %in% southeast) {
division[i] <- "southeast"
} else if (network.vertex.names(net)[i] %in% northwest) {
division[i] <- "northwest"
} else if (network.vertex.names(net)[i] %in% pacific) {
division[i] <- "pacific"
} else {
division[i] <- "southwest"
}
}
head(division, n = 10)
conference <- character(length = 30)
for (i in 1:30) {
if (network.vertex.names(net)[i] %in% east_conference) {
conference[i] <- "eastern conference"
} else {
conference[i] <- "western conference"
}
}
head(conference, n = 10)
net = network(teams, directed = FALSE, matrix.type="edgelist")
ggnet2(net, label = TRUE) + ggtitle("Teams Grouped by 3-pointers")
# set label = TRUE to see label for each node
net = network(teams, directed = FALSE, matrix.type="edgelist")
ggnet2(net, label = TRUE) + ggtitle("Teams Grouped by 3-Pointers")
# set label = TRUE to see label for each node
set.vertex.attribute(net, "division", division)
# create a new attribute called "division"
colors <- c("Set1", "Set2", "Set3", "Pastel1", "Pastel2")
# create a vector of color schemes to choose at random
ggnet2(net, label = TRUE, color = "division", palette = sample(colors, 1)) + ggtitle("Teams Grouped by 3-Pointers")
# palette chooses the color scheme
# use sample(colors, 1) to randomly pick a color scheme
set.vertex.attribute(net, "value", value)
ggnet2(net, label = TRUE, color = "division", palette = sample(colors, 1), size = "value", size.cut = TRUE, size.legend = "number of 3-pointers") + ggtitle("Teams Grouped by 3-Pointers")
# set the size argument to the "value" attribute
# set size.cut = TRUE to separate node sizes by quartile
# set size.legend = "number of 3-pointers" to relabel the legend name
set.vertex.attribute(net, "conference", conference)
ggnet2(net, label = TRUE, color = "division", palette = sample(colors, 1), size = "value", size.cut = TRUE, size.legend = "number of 3-pointers", shape = "conference") + ggtitle("Teams Grouped by 3-Pointers")
# set the shape argument to the "conference" attribute
group_teams_by <- function(x) {
# x is a statistic in the dataset inputted as a string
teams <- matrix(NA, nrow = 30, ncol = 2)
teams[ , 1] <- data[ , 1]
for (i in 1:30) {
test <- data[-i, ]
closest <-  which.min(abs(data[i, x] - test[ , x]))
teams[i, 2] <- test[closest, 1]
}
value <- numeric(length = 30)
for (i in 1:30) {
value[i] <- data[i, x]
}
net <- network(teams, directed = FALSE, matrix.type="edgelist")
set.vertex.attribute(net, "division", division)
set.vertex.attribute(net, "conference", conference)
set.vertex.attribute(net, x, value)
ggnet2(net, label = TRUE, color = "division", palette = sample(colors, 1), size = x, size.cut = TRUE, shape = "conference") + ggtitle(paste("Teams Grouped by", x, sep = ""))
}
group_teams_by("experience")
group_teams_by("salary")
group_teams_by("points")
group_teams_by("assists")
group_teams_by("efficiency")
group_teams_by <- function(x) {
# x is a statistic in the dataset inputted as a string
teams <- matrix(NA, nrow = 30, ncol = 2)
teams[ , 1] <- data[ , 1]
for (i in 1:30) {
test <- data[-i, ]
closest <-  which.min(abs(data[i, x] - test[ , x]))
teams[i, 2] <- test[closest, 1]
}
value <- numeric(length = 30)
for (i in 1:30) {
value[i] <- data[i, x]
}
net <- network(teams, directed = FALSE, matrix.type="edgelist")
set.vertex.attribute(net, "division", division)
set.vertex.attribute(net, "conference", conference)
set.vertex.attribute(net, x, value)
ggnet2(net, label = TRUE, color = "division", palette = sample(colors, 1), size = x, size.cut = TRUE, shape = "conference") + ggtitle(paste("Teams Grouped by", x, sep = " "))
}
group_teams_by("experience")
group_teams_by("salary")
group_teams_by("points")
group_teams_by("assists")
group_teams_by("efficiency")
group_teams_by <- function(x) {
# x is a statistic in the dataset inputted as a string
teams <- matrix(NA, nrow = 30, ncol = 2)
teams[ , 1] <- data[ , 1]
for (i in 1:30) {
test <- data[-i, ]
closest <-  which.min(abs(data[i, x] - test[ , x]))
teams[i, 2] <- test[closest, 1]
}
value <- numeric(length = 30)
for (i in 1:30) {
value[i] <- data[i, x]
}
net <- network(teams, directed = FALSE, matrix.type="edgelist")
set.vertex.attribute(net, "division", division)
set.vertex.attribute(net, "conference", conference)
set.vertex.attribute(net, x, value)
ggnet2(net, label = TRUE, color = "division", palette = sample(colors, 1), size = x, size.cut = TRUE, shape = "conference") + ggtitle(paste("Teams grouped by", x, sep = " "))
}
group_teams_by("experience")
group_teams_by("salary")
group_teams_by("points")
group_teams_by("assists")
group_teams_by("efficiency")
set.vertex.attribute(net, "conference", conference)
ggnet2(net, label = TRUE, color = "division", palette = sample(colors, 1), size = "value", size.cut = TRUE, size.legend = "number of 3-pointers", shape = "conference") + ggtitle("Teams grouped by 3-pointers")
# set the shape argument to the "conference" attribute
set.vertex.attribute(net, "conference", conference)
ggnet2(net, label = TRUE, color = "division", palette = sample(colors, 1), size = "value", size.cut = TRUE, size.legend = "number of 3-pointers", shape = "conference", shape.palette = c(19, 15)) + ggtitle("Teams grouped by 3-pointers")
# set the shape argument to the "conference" attribute
set.vertex.attribute(net, "conference", conference)
ggnet2(net, label = TRUE, color = "division", palette = sample(colors, 1), size = "value", size.cut = TRUE, size.legend = "number of 3-pointers", shape = "conference") + ggtitle("Teams grouped by 3-pointers")
# set the shape argument to the "conference" attribute
set.vertex.attribute(net, "conference", conference)
ggnet2(net, label = TRUE, color = "division", palette = sample(colors, 1), size = "value", size.cut = TRUE, size.legend = "number of 3-pointers", shape = "conference", shape.palette = c("eastern conference" = 15, "western conference" = 19)) + ggtitle("Teams grouped by 3-pointers")
# set the shape argument to the "conference" attribute
group_teams_by <- function(x) {
# x is a statistic from the dataset inputted as a string
teams <- matrix(NA, nrow = 30, ncol = 2)
teams[ , 1] <- data[ , 1]
for (i in 1:30) {
test <- data[-i, ]
closest <-  which.min(abs(data[i, x] - test[ , x]))
teams[i, 2] <- test[closest, 1]
}
value <- numeric(length = 30)
for (i in 1:30) {
value[i] <- data[i, x]
}
net <- network(teams, directed = FALSE, matrix.type="edgelist")
set.vertex.attribute(net, "division", division)
set.vertex.attribute(net, "conference", conference)
set.vertex.attribute(net, x, value)
ggnet2(net, label = TRUE, color = "division", palette = sample(colors, 1), size = x, size.cut = TRUE, shape = "conference", shape.palette = c("eastern conference" = 15, "western conference" = 19)) + ggtitle(paste("Teams grouped by", x, sep = " "))
}
group_teams_by("experience")
group_teams_by("salary")
group_teams_by("points")
group_teams_by("assists")
group_teams_by("efficiency")
set.vertex.attribute(net, "conference", conference)
ggnet2(net, label = TRUE, color = "division", palette = sample(colors, 1), size = "value", size.cut = TRUE, size.legend = "number of 3-pointers", shape = "conference", shape.palette = c("eastern conference" = 5, "western conference" = 6)) + ggtitle("Teams grouped by 3-pointers")
# set the shape argument to the "conference" attribute
# shape.palette chooses the shapes
set.vertex.attribute(net, "conference", conference)
ggnet2(net, label = TRUE, color = "division", palette = sample(colors, 1), size = "value", size.cut = TRUE, size.legend = "number of 3-pointers", shape = "conference", shape.palette = c("eastern conference" = 23, "western conference" = 25)) + ggtitle("Teams grouped by 3-pointers")
# set the shape argument to the "conference" attribute
# shape.palette chooses the shapes
set.vertex.attribute(net, "conference", conference)
ggnet2(net, label = TRUE, color = "division", palette = sample(colors, 1), size = "value", size.cut = TRUE, size.legend = "number of 3-pointers", shape = "conference", shape.palette = c("eastern conference" = 18, "western conference" = 20)) + ggtitle("Teams grouped by 3-pointers")
# set the shape argument to the "conference" attribute
# shape.palette chooses the shapes
set.vertex.attribute(net, "conference", conference)
ggnet2(net, label = TRUE, color = "division", palette = sample(colors, 1), size = "value", size.cut = TRUE, size.legend = "number of 3-pointers", shape = "conference", shape.palette = c("eastern conference" = 8, "western conference" = 10)) + ggtitle("Teams grouped by 3-pointers")
# set the shape argument to the "conference" attribute
# shape.palette chooses the shapes
set.vertex.attribute(net, "conference", conference)
ggnet2(net, label = TRUE, color = "division", palette = sample(colors, 1), size = "value", size.cut = TRUE, size.legend = "number of 3-pointers", shape = "conference", shape.palette = c("eastern conference" = 15, "western conference" = 17)) + ggtitle("Teams grouped by 3-pointers")
# set the shape argument to the "conference" attribute
# shape.palette chooses the shapes
group_teams_by <- function(x) {
# x is a statistic from the dataset inputted as a string
teams <- matrix(NA, nrow = 30, ncol = 2)
teams[ , 1] <- data[ , 1]
for (i in 1:30) {
test <- data[-i, ]
closest <-  which.min(abs(data[i, x] - test[ , x]))
teams[i, 2] <- test[closest, 1]
}
value <- numeric(length = 30)
for (i in 1:30) {
value[i] <- data[i, x]
}
net <- network(teams, directed = FALSE, matrix.type="edgelist")
set.vertex.attribute(net, "division", division)
set.vertex.attribute(net, "conference", conference)
set.vertex.attribute(net, x, value)
ggnet2(net, label = TRUE, color = "division", palette = sample(colors, 1), size = x, size.cut = TRUE, shape = "conference", shape.palette = c("eastern conference" = 15, "western conference" = 17)) + ggtitle(paste("Teams grouped by", x, sep = " "))
}
group_teams_by("experience")
group_teams_by("salary")
group_teams_by("points")
group_teams_by("assists")
group_teams_by("efficiency")
group_teams_by("experience")
group_teams_by("salary")
group_teams_by("points")
group_teams_by("assists")
group_teams_by("efficiency")
knitr::opts_chunk$set(echo = TRUE)
library(GGally)
library(network)
library(sna)
library(ggplot2)
data <- read.csv("../data/nba2017-teams.csv", stringsAsFactors = FALSE)
# set stringsAsFactors = FALSE to keep team names as characters
data <- data[-1]
# remove unnecessary first column which contains integers from 1 to 30
head(data, n = 5)
# show first 5 rows of data
teams <- matrix(NA, nrow = 30, ncol = 2)
# set nrow = 30 for 30 teams and ncol = 2 for source and target columns
teams[ , 1] <- data[ , 1]
for (i in 1:30) {
test <- data[-i, ]
# create a test matrix and set it to the dataset of 29 other teams
closest <- which.min(abs(data[i, "points3"] - test[ , "points3"]))
# find the index of the team that is the closest to the source team in terms of points3
teams[i, 2] <- test[closest, 1]
# set the target of the source team equal to the closest team
}
head(teams, n = 10)
# show first 10 rows
net = network(teams, directed = FALSE, matrix.type="edgelist")
ggnet2(net, label = TRUE) + ggtitle("Teams grouped by 3-pointers")
# set label = TRUE to see label for each node
atlantic <- c('BOS', 'BRK', 'NYK', 'PHI', 'TOR')
central <- c('CHI', 'CLE', 'DET', 'IND', 'MIL')
southeast <- c('ATL', 'CHO', 'MIA', 'ORL', 'WAS')
northwest <- c('DEN', 'MIN', 'OKC', 'POR', 'UTA')
pacific <- c('GSW', 'LAC', 'LAL', 'PHO', 'SAC')
southwest <- c('DAL', 'HOU', 'MEM', 'NOP', 'SAS')
division <- character(length = 30)
for (i in 1:30) {
if (network.vertex.names(net)[i] %in% atlantic) {
# network.vertex.names(net) gives you a vector of the teams in net
# use %in% to see if the team is an element in atlantic
division[i] <- "atlantic"
# assign the ith element in division to atlantic
} else if (network.vertex.names(net)[i] %in% central) {
division[i] <- "central"
} else if (network.vertex.names(net)[i] %in% southeast) {
division[i] <- "southeast"
} else if (network.vertex.names(net)[i] %in% northwest) {
division[i] <- "northwest"
} else if (network.vertex.names(net)[i] %in% pacific) {
division[i] <- "pacific"
} else {
division[i] <- "southwest"
}
}
head(division, n = 10)
set.vertex.attribute(net, "division", division)
# create a new attribute called "division"
colors <- c("Set2", "Set3", "Pastel1", "Pastel2")
# create a vector of color schemes to choose at random
ggnet2(net, label = TRUE, color = "division", palette = sample(colors, 1)) + ggtitle("Teams grouped by 3-pointers")
# palette chooses the color scheme
# use sample(colors, 1) to randomly pick a color scheme
value <- numeric(length = 30)
for (i in 1:30) {
value[i] <- data[i, "points3"]
}
set.vertex.attribute(net, "value", value)
ggnet2(net, label = TRUE, color = "division", palette = sample(colors, 1), size = "value", size.cut = TRUE, size.legend = "number of 3-pointers") + ggtitle("Teams grouped by 3-pointers")
# set the size argument to the "value" attribute
# set size.cut = TRUE to separate node sizes by quartile
# set size.legend = "number of 3-pointers" to relabel the legend name
east_conference <- c(atlantic, central, southeast)
west_conference <- c(northwest, pacific, southwest)
conference <- character(length = 30)
for (i in 1:30) {
if (network.vertex.names(net)[i] %in% east_conference) {
conference[i] <- "eastern conference"
} else {
conference[i] <- "western conference"
}
}
head(conference, n = 10)
set.vertex.attribute(net, "conference", conference)
ggnet2(net, label = TRUE, color = "division", palette = sample(colors, 1), size = "value", size.cut = TRUE, size.legend = "number of 3-pointers", shape = "conference", shape.palette = c("eastern conference" = 15, "western conference" = 17)) + ggtitle("Teams grouped by 3-pointers")
# set the shape argument to the "conference" attribute
# shape.palette chooses the shapes
group_teams_by <- function(x) {
# x is a statistic from the dataset inputted as a string
teams <- matrix(NA, nrow = 30, ncol = 2)
teams[ , 1] <- data[ , 1]
for (i in 1:30) {
test <- data[-i, ]
closest <-  which.min(abs(data[i, x] - test[ , x]))
teams[i, 2] <- test[closest, 1]
}
value <- numeric(length = 30)
for (i in 1:30) {
value[i] <- data[i, x]
}
net <- network(teams, directed = FALSE, matrix.type="edgelist")
set.vertex.attribute(net, "division", division)
set.vertex.attribute(net, "conference", conference)
set.vertex.attribute(net, x, value)
ggnet2(net, label = TRUE, color = "division", palette = sample(colors, 1), size = x, size.cut = TRUE, shape = "conference", shape.palette = c("eastern conference" = 15, "western conference" = 17)) + ggtitle(paste("Teams grouped by", x, sep = " "))
}
colnames(data)
# show the available statistics
group_teams_by("experience")
group_teams_by("salary")
group_teams_by("points")
group_teams_by("assists")
group_teams_by("efficiency")
knitr::opts_chunk$set(echo = TRUE)
set.vertex.attribute(net, "conference", conference)
View(data)
